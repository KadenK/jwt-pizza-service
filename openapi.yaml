openapi: 3.0.3
info:
  title: JWT Pizza Service API
  version: "20240518.154317"
  description: API documentation for JWT Pizza Service
servers:
  - url: http://localhost:3000
security:
  - bearerAuth: []
paths:
  /api/auth:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
    put:
      summary: Login existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
    delete:
      summary: Logout a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/user/me:
    get:
      summary: Get authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/user/{userId}:
    put:
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
  /api/order/menu:
    get:
      summary: Get the pizza menu
      responses:
        '200':
          description: Pizza menu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
    put:
      summary: Add an item to the menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                image:
                  type: string
                price:
                  type: number
      responses:
        '200':
          description: Menu item added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
  /api/order:
    get:
      summary: Get the orders for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  dinerId:
                    type: integer
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  page:
                    type: integer
    post:
      summary: Create a order for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                franchiseId:
                  type: integer
                storeId:
                  type: integer
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      menuId:
                        type: integer
                      description:
                        type: string
                      price:
                        type: number
      responses:
        '200':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    type: object
                    properties:
                      franchiseId:
                        type: integer
                      storeId:
                        type: integer
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            menuId:
                              type: integer
                            description:
                              type: string
                            price:
                              type: number
                      id:
                        type: integer
                  jwt:
                    type: string
  /api/franchise:
    get:
      summary: List all the franchises
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Franchises list
          content:
            application/json:
              schema:
                type: object
                properties:
                  franchises:
                    type: array
                    items:
                      $ref: '#/components/schemas/Franchise'
                  more:
                    type: boolean
    post:
      summary: Create a new franchise
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                admins:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
      responses:
        '200':
          description: Franchise created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Franchise'
  /api/franchise/{userId}:
    get:
      summary: List a user's franchises
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User's franchises
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Franchise'
  /api/franchise/{franchiseId}:
    delete:
      summary: Delete a franchises
      security:
        - bearerAuth: []
      parameters:
        - name: franchiseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Franchise deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/franchise/{franchiseId}/store:
    post:
      summary: Create a new franchise store
      security:
        - bearerAuth: []
      parameters:
        - name: franchiseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                franchiseId:
                  type: integer
                name:
                  type: string
      responses:
        '200':
          description: Store created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
  /api/franchise/{franchiseId}/store/{storeId}:
    delete:
      summary: Delete a store
      security:
        - bearerAuth: []
      parameters:
        - name: franchiseId
          in: path
          required: true
          schema:
            type: integer
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Store deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
    MenuItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        image:
          type: string
        price:
          type: number
        description:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        franchiseId:
          type: integer
        storeId:
          type: integer
        date:
          type: string
          format: date-time
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              menuId:
                type: integer
              description:
                type: string
              price:
                type: number
    Franchise:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        admins:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              email:
                type: string
        stores:
          type: array
          items:
            $ref: '#/components/schemas/Store'
    Store:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        totalRevenue:
          type: number